import { readFileSync, writeFileSync } from 'fs';
import { resolve, dirname } from 'path';
import { fileURLToPath } from 'url';

/*
 解析 foundation.scss / semantic.scss / component.scss 生成：
  - src/tokens.ts （具名导出常量对象）
  - tokens.json （根目录，用于外部工具消费）
*/

interface TokenEntry {
    name: string;
    value: string;
    file: string;
}

function parseFile(absPath: string, fileLabel: string): TokenEntry[] {
    const raw = readFileSync(absPath, 'utf-8');
    const out: TokenEntry[] = [];
    for (const line of raw.split(/\r?\n/)) {
        const m = line.match(/^(\s*--[a-zA-Z0-9-_]+):\s*(.+);/);
        if (m)
            out.push({
                name: m[1].trim(),
                value: m[2].trim(),
                file: fileLabel
            });
    }
    return out;
}

function main() {
    const __DIR = dirname(fileURLToPath(import.meta.url));
    const stylesDir = resolve(__DIR, '../src/styles');
    const files = ['foundation.scss', 'semantic.scss', 'component.scss'];
    const entries: TokenEntry[] = [];
    for (const f of files) {
        entries.push(...parseFile(resolve(stylesDir, f), f));
    }
    // 构建对象
    const tokenObject: Record<string, { value: string; layer: string }> = {};
    for (const e of entries) {
        tokenObject[e.name] = {
            value: e.value,
            layer: e.file.replace('.scss', '')
        };
    }

    // 生成 TypeScript 文件
    const tsPath = resolve(__DIR, '../src/tokens.ts');
    const tsContent = `/** Auto-generated by scripts/genTokens.ts */\nexport interface DesignToken { value: string; layer: string }\nexport const tokens: Record<string, DesignToken> = ${JSON.stringify(tokenObject, null, 4)};\nexport type TokenName = keyof typeof tokens;\n`;
    writeFileSync(tsPath, tsContent, 'utf-8');

    // 生成 JSON 文件
    const jsonPath = resolve(__DIR, '../tokens.json');
    writeFileSync(jsonPath, JSON.stringify(tokenObject, null, 2), 'utf-8');
    console.log(
        `Generated ${tsPath} and ${jsonPath} (${entries.length} tokens).`
    );
}

try {
    main();
} catch (err) {
    console.error('[genTokens] failed:', err);
    process.exit(1);
}
